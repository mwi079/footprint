[{"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\index.js":"1","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\App.js":"2","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\ApiService.js":"3","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\footprint\\footprint.js":"4","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\houseForms\\home.js":"5","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\car\\car.js":"6","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\trends\\trend.js":"7","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\helper.js":"8","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\reducer.js":"9"},{"size":220,"mtime":1610474875835,"results":"10","hashOfConfig":"11"},{"size":13572,"mtime":1611083490868,"results":"12","hashOfConfig":"11"},{"size":1345,"mtime":1610967532290,"results":"13","hashOfConfig":"11"},{"size":4346,"mtime":1611083608451,"results":"14","hashOfConfig":"11"},{"size":5673,"mtime":1610962885581,"results":"15","hashOfConfig":"11"},{"size":4142,"mtime":1610962884181,"results":"16","hashOfConfig":"11"},{"size":2363,"mtime":1611082960070,"results":"17","hashOfConfig":"11"},{"size":2230,"mtime":1611060186238,"results":"18","hashOfConfig":"11"},{"size":3237,"mtime":1611078054018,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ku2ent",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\index.js",[],["41","42"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\App.js",["43"],"import React, { useEffect } from 'react';\nimport { Store } from './reducer';\nimport { DriveEtaSharp, HomeSharp, PublicSharp } from '@material-ui/icons';\nimport { Tooltip } from '@material-ui/core';\nimport {\n  getMakes,\n  getYears,\n  getModels,\n  getOptions,\n  getGPM,\n  getIntensity,\n  getCharge,\n  getCO2Trend,\n  getTempTrend,\n} from './ApiService';\nimport { homeUnits, carUnits, compareCO2 } from './helper';\nimport Car from './car/car';\nimport Footprint from './footprint/footprint';\nimport Home from './houseForms/home';\nimport Trend from './trends/trend';\nimport { ReactComponent as Foot } from './footprintbig.svg';\nimport moment from 'moment';\nimport './index.css';\n\nfunction App() {\n  const [state, dispatch] = Store();\n  const {\n    carView,\n    homeView,\n    resultsView,\n    worldView,\n    car,\n    journey,\n    distanceUnits,\n    carCompare,\n    elec,\n    years,\n    makes,\n    models,\n    options,\n    postcode,\n    dateRange,\n    homeUse,\n    genMix,\n    gasUnits,\n    elecUnits,\n    CO2Trend,\n    CO2timeTrend,\n    tempTrend,\n    tempTimeTrend,\n  } = state;\n\n  const generationMix = Array(9).fill(0);\n  const erange = 0.3; //kWh per mile\n\n  useEffect(() => {\n    getYears().then(({ data }) => {\n      let array = [];\n      data.menuItem.map((item) => array.push(item.value));\n      dispatch({ type: 'years', payload: array });\n    });\n\n    getCharge().then(({ data }) => {\n      dispatch({\n        type: 'carCompare',\n        payload: {\n          intensity: data.data[0].intensity.forecast,\n          compare: (data.data[0].intensity.forecast * erange) / 1000,\n          CO2: 0,\n        },\n      });\n    });\n    getCO2Trend().then(({ data }) => {\n      let array = [];\n      let arrayt = [];\n      data.co2.map((entry, i) => {\n        if (i % 30 === 0) {\n          let time = `${entry.year}-${entry.month}-${entry.day}`;\n          time = moment(time).format('YYYY-MM');\n          arrayt.push(time);\n          array.push(entry.trend);\n          return true;\n        }\n        return false;\n      });\n      dispatch({\n        type: 'CO2Trend',\n        payload: array,\n      });\n      dispatch({\n        type: 'CO2timeTrend',\n        payload: arrayt,\n      });\n    });\n    getTempTrend().then(({ data }) => {\n      let array = [];\n      let arrayt = [];\n      data.result.map((entry) => {\n        if (+entry.time > 2011) {\n          let month = Math.round(365 * (entry.time.slice(5, 7) / 100 / 30));\n          if (month === 0) {\n            month = 1;\n          }\n          let year = entry.time.slice(0, 4);\n          let time = `${year}-${month}`;\n          time = moment(time).format('YYYY-MM');\n          arrayt.push(time);\n          array.push(entry.station);\n\n          return true;\n        } else return false;\n      });\n      dispatch({\n        type: 'tempTrend',\n        payload: array,\n      });\n      dispatch({\n        type: 'tempTimeTrend',\n        payload: arrayt,\n      });\n    });\n  }, []);\n\n  const toggleViewCar = () => {\n    dispatch({ type: 'carView', payload: !carView });\n  };\n\n  const refreshCar = () => {\n    dispatch({ type: 'makes', payload: ['makes'] });\n    dispatch({ type: 'models', payload: ['models'] });\n    dispatch({ type: 'options', payload: ['options'] });\n    dispatch({\n      type: 'car',\n      payload: {\n        year: '',\n        make: '',\n        model: '',\n        option: '',\n        id: '',\n        gpm: '',\n        em: '',\n      },\n    });\n    dispatch({ type: 'journey', payload: { distance: 0, CO2: 0 } });\n  };\n\n  const makesOfYear = (year) => {\n    dispatch({ type: 'makes', payload: ['makes'] });\n    dispatch({ type: 'models', payload: ['models'] });\n    dispatch({ type: 'options', payload: ['options'] });\n    dispatch({\n      type: 'car',\n      payload: {\n        year,\n        make: '',\n        model: '',\n        option: '',\n        id: '',\n        gpm: '',\n        em: '',\n      },\n    });\n    dispatch({\n      type: 'journey',\n      payload: { distance: journey.distance, CO2: 0 },\n    });\n\n    if (year !== null) {\n      getMakes(year).then(({ data }) => {\n        let array = [];\n        data.menuItem.map((item) => array.push(item.value));\n        dispatch({ type: 'makes', payload: array });\n      });\n    }\n  };\n\n  const modelsOfMakes = (make) => {\n    dispatch({ type: 'models', payload: ['models'] });\n    dispatch({ type: 'options', payload: ['options'] });\n    dispatch({\n      type: 'car',\n      payload: {\n        year: car.year,\n        make,\n        model: '',\n        option: '',\n        id: '',\n        gpm: '',\n        em: '',\n      },\n    });\n    dispatch({\n      type: 'journey',\n      payload: { distance: journey.distance, CO2: 0 },\n    });\n\n    if (make !== null) {\n      getModels(make, car).then(({ data }) => {\n        let array = [];\n        data.menuItem.map((item) => array.push(item.value));\n        dispatch({ type: 'models', payload: array });\n      });\n    }\n  };\n\n  const optionsOfModels = (model) => {\n    dispatch({ type: 'options', payload: ['options'] });\n    dispatch({\n      type: 'car',\n      payload: {\n        year: car.year,\n        make: car.make,\n        model,\n        option: '',\n        id: '',\n        gpm: '',\n        em: '',\n      },\n    });\n\n    dispatch({\n      type: 'journey',\n      payload: { distance: journey.distance, CO2: 0 },\n    });\n    if (model !== null) {\n      getOptions(model, car).then(({ data }) => {\n        let array = [];\n        if (data.menuItem.length) {\n          data.menuItem.map((item) => array.push(item));\n          dispatch({ type: 'options', payload: array });\n        } else {\n          dispatch({ type: 'options', payload: [data.menuItem] });\n        }\n      });\n    }\n  };\n\n  const getCarID = (option) => {\n    console.log('hello');\n    if (option !== null) {\n      dispatch({\n        type: 'car',\n        payload: {\n          year: car.year,\n          make: car.make,\n          model: car.model,\n          option: option.text,\n          id: option.value,\n          gpm: '',\n          em: '',\n        },\n      });\n    } else {\n      dispatch({\n        type: 'car',\n        payload: {\n          year: car.year,\n          make: car.make,\n          model: car.model,\n          option: '',\n          id: '',\n          gpm: '',\n          em: '',\n        },\n      });\n\n      dispatch({\n        type: 'journey',\n        payload: { distance: journey.distance, CO2: 0 },\n      });\n    }\n  };\n\n  const toggleDistanceUnits = (event) => {\n    event.preventDefault();\n    dispatch({ type: 'distanceUnits', payload: event.target.value });\n    dispatch({\n      type: 'journey',\n      payload: { distance: journey.distance, CO2: 0 },\n    });\n  };\n\n  const journeyDistance = (distance) => {\n    dispatch({\n      type: 'journey',\n      payload: { distance, CO2: 0 },\n    });\n  };\n\n  const journeyCO2 = () => {\n    getGPM(car.id).then(({ data }) => {\n      dispatch({\n        type: 'car',\n        payload: {\n          year: car.year,\n          make: car.make,\n          model: car.model,\n          option: car.option,\n          id: car.id,\n          gpm: +data.co2TailpipeGpm,\n          em: +data.cityE,\n        },\n      });\n\n      if (+data.co2TailpipeGpm !== 0)\n        dispatch({ type: 'elec', payload: false });\n      else dispatch({ type: 'elec', payload: true });\n\n      let CO2 = carUnits(data, journey, distanceUnits, carCompare);\n      let carCompareCO2 = compareCO2(carCompare, journey, distanceUnits);\n\n      dispatch({\n        type: 'journey',\n        payload: { distance: journey.distance, CO2 },\n      });\n      dispatch({\n        type: 'carCompare',\n        payload: {\n          intensity: carCompare.intensity,\n          compare: carCompare.compare,\n          CO2: carCompareCO2,\n        },\n      });\n    });\n  };\n  const toggleViewHome = () => {\n    dispatch({ type: 'homeView', payload: !homeView });\n  };\n\n  const refreshHome = () => {\n    dispatch({ type: 'postcode', payload: '' });\n    dispatch({ type: 'homeUse', payload: { elec: 0, gas: 0, CO2: 0 } });\n    dispatch({\n      type: 'dateRange',\n      payload: {\n        from: moment().subtract(1, 'd').format('YYYY-MM-DDTHH:MM'),\n        to: moment().format('YYYY-MM-DDTHH:MM'),\n      },\n    });\n  };\n\n  const updatePostcode = (postcode) => {\n    dispatch({ type: 'postcode', payload: postcode });\n  };\n\n  const updateRange = (date, option) => {\n    if (option === 'from') {\n      dispatch({\n        type: 'dateRange',\n        payload: { from: date, to: dateRange.to },\n      });\n    } else\n      dispatch({\n        type: 'dateRange',\n        payload: { from: dateRange.from, to: date },\n      });\n  };\n\n  const changeElecUnits = (event) => {\n    event.preventDefault();\n    dispatch({ type: 'elecUnits', payload: event.target.value });\n  };\n\n  const updateElecUse = (elec) => {\n    dispatch({\n      type: 'homeUse',\n      payload: {\n        intensity: homeUse.intensity,\n        elec,\n        gas: homeUse.gas,\n        CO2: 0,\n      },\n    });\n  };\n\n  const changeGasUnits = (event) => {\n    event.preventDefault();\n    dispatch({ type: 'gasUnits', payload: event.target.value });\n  };\n\n  const updateGasUse = (gas) => {\n    dispatch({\n      type: 'homeUse',\n      payload: {\n        intensity: homeUse.intensity,\n        elec: homeUse.elec,\n        gas,\n        CO2: 0,\n      },\n    });\n  };\n\n  const homeCO2 = () => {\n    let sum = 0;\n    let entries = 0;\n    let intensity = 0;\n    let CO2;\n\n    getIntensity(dateRange.from, dateRange.to, postcode).then(({ data }) => {\n      entries += data.data.data.length;\n      data.data.data.map((entry) => {\n        entry.generationmix.map((subEntry, i) => {\n          return (generationMix[i] += subEntry.perc);\n        });\n        return (sum += entry.intensity.forecast);\n      });\n      intensity = sum / entries;\n      generationMix.map((entry, i) => {\n        return (generationMix[i] =\n          (Math.round(entry / entries) * 100) / 100).toFixed(2);\n      });\n\n      CO2 = homeUnits(intensity, gasUnits, elecUnits, homeUse);\n\n      dispatch({\n        type: 'homeUse',\n        payload: {\n          intensity,\n          elec: homeUse.elec,\n          gas: homeUse.gas,\n          CO2,\n        },\n      });\n      dispatch({ type: 'genMix', payload: generationMix });\n    });\n  };\n\n  const toggleResultsView = () => {\n    dispatch({ type: 'resultsView', payload: !resultsView });\n  };\n\n  const toggleWorldView = () => {\n    dispatch({ type: 'worldView', payload: !worldView });\n  };\n\n  return (\n    <div className=\"overallContainer\">\n      {carView ? (\n        <Car\n          years={years}\n          makes={makes}\n          models={models}\n          options={options}\n          makesOfYear={makesOfYear}\n          modelsOfMakes={modelsOfMakes}\n          optionsOfModels={optionsOfModels}\n          getCarID={getCarID}\n          journeyDistance={journeyDistance}\n          journey={journey}\n          car={car}\n          journeyCO2={journeyCO2}\n          toggleDistanceUnits={toggleDistanceUnits}\n          distanceUnits={distanceUnits}\n          toggleViewCar={toggleViewCar}\n          refreshCar={refreshCar}\n        />\n      ) : null}\n      {homeView ? (\n        <Home\n          homeCO2={homeCO2}\n          updatePostcode={updatePostcode}\n          updateRange={updateRange}\n          postcode={postcode}\n          dateRange={dateRange}\n          updateElecUse={updateElecUse}\n          updateGasUse={updateGasUse}\n          homeUse={homeUse}\n          toggleViewHome={toggleViewHome}\n          refreshHome={refreshHome}\n          elecUnits={elecUnits}\n          gasUnits={gasUnits}\n          changeElecUnits={changeElecUnits}\n          changeGasUnits={changeGasUnits}\n        />\n      ) : null}\n      {resultsView ? (\n        <Footprint\n          journey={journey}\n          homeUse={homeUse}\n          genMix={genMix}\n          elec={elec}\n          carCompare={carCompare}\n          toggleResultsView={toggleResultsView}\n        />\n      ) : null}\n\n      <center>\n        {carView && homeView ? null : <h1>What energy do I use?</h1>}\n        {carView ? null : (\n          <Tooltip title=\"My Car\" placement=\"left-start\">\n            <DriveEtaSharp\n              className=\"button\"\n              color=\"primary\"\n              style={{ fontSize: 200 }}\n              onClick={toggleViewCar}\n              title=\"My Car\"\n            />\n          </Tooltip>\n        )}\n        {homeView ? null : (\n          <Tooltip title=\"My Home\" placement=\"right-start\">\n            <HomeSharp\n              className=\"button\"\n              color=\"primary\"\n              style={{ fontSize: 200 }}\n              onClick={toggleViewHome}\n            />\n          </Tooltip>\n        )}\n\n        {resultsView ? null : (\n          <>\n            <h1>What's my footprint?</h1>\n            <p></p>\n            <Tooltip title=\"My Footprint\" placement=\"right-start\">\n              <Foot className=\"button\" id=\"foot\" onClick={toggleResultsView} />\n            </Tooltip>\n            <p></p>\n          </>\n        )}\n      </center>\n      <center>\n        {worldView ? null : (\n          <>\n            <h1>Why does it matter?</h1>\n            <Tooltip title=\"Our Home\" placement=\"right-start\">\n              <PublicSharp\n                className=\"button\"\n                color=\"primary\"\n                style={{ fontSize: 200 }}\n                onClick={toggleWorldView}\n              />\n            </Tooltip>\n          </>\n        )}\n      </center>\n      {worldView ? (\n        <Trend\n          CO2Trend={CO2Trend}\n          CO2timeTrend={CO2timeTrend}\n          tempTrend={tempTrend}\n          tempTimeTrend={tempTimeTrend}\n          toggleWorldView={toggleWorldView}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\ApiService.js",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\footprint\\footprint.js",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\houseForms\\home.js",[],["44","45"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\car\\car.js",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\trends\\trend.js",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\helper.js",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\SoloProject\\client\\src\\reducer.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":122,"column":6,"nodeType":"52","endLine":122,"endColumn":8,"suggestions":"53"},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["58"],["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [dispatch]",{"range":"61","text":"62"},[2914,2916],"[dispatch]"]